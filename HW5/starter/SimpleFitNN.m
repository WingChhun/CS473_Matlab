% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
%
% This script assumes these variables are defined:
%
%   houseInputs - input data.
%   houseTargets - target data.
 
% inputs = houseInputs;
% targets = houseTargets;

close('all');
clear('all');
set(0,'DefaultFigureWindowStyle','docked');

load simplefit_dataset.mat;

inputs = simplefitInputs;
targets = simplefitTargets;

% Create a Fitting Network
hiddenLayerSize = 3;
net = fitnet(hiddenLayerSize);

% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
 
% Train the Network
[net,tr] = train(net,inputs,targets);
 
% Test the Network
outputs = net(inputs);
errors = gsubtract(outputs,targets);
performance = perform(net,targets,outputs)
 
% View the Network
view(net)
 
% Plots
% Uncomment these lines to enable various plots.
figure; plot(inputs, targets, 'k',...
    inputs, outputs, 'r--');
figure, plotperform(tr)
figure, plottrainstate(tr)
% figure, plotfit(net, targets,outputs)
% figure, plotregression(net, targets,outputs)
% figure, ploterrhist(errors)